
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_PWM_Servo_UART\Debug\F4_PWM_Servo_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001128  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012b0  080012b0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012b4  080012b4  000112b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  080012b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          00000020  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000044  20000044  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000050c7  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b46  00000000  00000000  0002511b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000750  00000000  00000000  00025c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006b8  00000000  00000000  000263b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000022da  00000000  00000000  00026a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002572  00000000  00000000  00028d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002b2bc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f68  00000000  00000000  0002b33c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001298 	.word	0x08001298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08001298 	.word	0x08001298

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e076      	b.n	8000396 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a8:	2201      	movs	r2, #1
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	4013      	ands	r3, r2
 80002ba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d165      	bne.n	8000390 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	2103      	movs	r1, #3
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	4619      	mov	r1, r3
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d003      	beq.n	8000302 <GPIO_Init+0x76>
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d12e      	bne.n	8000360 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	2103      	movs	r1, #3
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	43db      	mvns	r3, r3
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	4619      	mov	r1, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	2101      	movs	r1, #1
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685a      	ldr	r2, [r3, #4]
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	799b      	ldrb	r3, [r3, #6]
 800034e:	4619      	mov	r1, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	b29b      	uxth	r3, r3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	b29b      	uxth	r3, r3
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29b      	uxth	r3, r3
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	79db      	ldrb	r3, [r3, #7]
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	d985      	bls.n	80002a8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800039c:	bf00      	nop
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
 80003b4:	4613      	mov	r3, r2
 80003b6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003bc:	2300      	movs	r3, #0
 80003be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003c0:	787a      	ldrb	r2, [r7, #1]
 80003c2:	887b      	ldrh	r3, [r7, #2]
 80003c4:	f003 0307 	and.w	r3, r3, #7
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	887b      	ldrh	r3, [r7, #2]
 80003da:	08db      	lsrs	r3, r3, #3
 80003dc:	b29b      	uxth	r3, r3
 80003de:	461a      	mov	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3208      	adds	r2, #8
 80003e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e8:	887b      	ldrh	r3, [r7, #2]
 80003ea:	f003 0307 	and.w	r3, r3, #7
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	210f      	movs	r1, #15
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	ea02 0103 	and.w	r1, r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f100 0208 	add.w	r2, r0, #8
 8000402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800041c:	887b      	ldrh	r3, [r7, #2]
 800041e:	08db      	lsrs	r3, r3, #3
 8000420:	b29b      	uxth	r3, r3
 8000422:	461a      	mov	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3208      	adds	r2, #8
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop

0800043c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000446:	4a04      	ldr	r2, [pc, #16]	; (8000458 <RCC_HSICmd+0x1c>)
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	6013      	str	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	42470000 	.word	0x42470000

0800045c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <RCC_SYSCLKConfig+0x34>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	f023 0303 	bic.w	r3, r3, #3
 8000474:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800047e:	4a04      	ldr	r2, [pc, #16]	; (8000490 <RCC_SYSCLKConfig+0x34>)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	6093      	str	r3, [r2, #8]
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40023800 	.word	0x40023800

08000494 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000494:	b480      	push	{r7}
 8000496:	b089      	sub	sp, #36	; 0x24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800049c:	2300      	movs	r3, #0
 800049e:	61bb      	str	r3, [r7, #24]
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
 80004a8:	2302      	movs	r3, #2
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004b4:	4b48      	ldr	r3, [pc, #288]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f003 030c 	and.w	r3, r3, #12
 80004bc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80004be:	69bb      	ldr	r3, [r7, #24]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d007      	beq.n	80004d4 <RCC_GetClocksFreq+0x40>
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d009      	beq.n	80004dc <RCC_GetClocksFreq+0x48>
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d13f      	bne.n	800054c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a43      	ldr	r2, [pc, #268]	; (80005dc <RCC_GetClocksFreq+0x148>)
 80004d0:	601a      	str	r2, [r3, #0]
      break;
 80004d2:	e03f      	b.n	8000554 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80004d8:	601a      	str	r2, [r3, #0]
      break;
 80004da:	e03b      	b.n	8000554 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004dc:	4b3e      	ldr	r3, [pc, #248]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004e4:	0d9b      	lsrs	r3, r3, #22
 80004e6:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004e8:	4b3b      	ldr	r3, [pc, #236]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004f0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00d      	beq.n	8000514 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004f8:	4a39      	ldr	r2, [pc, #228]	; (80005e0 <RCC_GetClocksFreq+0x14c>)
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000500:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000508:	400b      	ands	r3, r1
 800050a:	099b      	lsrs	r3, r3, #6
 800050c:	fb03 f302 	mul.w	r3, r3, r2
 8000510:	61fb      	str	r3, [r7, #28]
 8000512:	e00c      	b.n	800052e <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000514:	4a31      	ldr	r2, [pc, #196]	; (80005dc <RCC_GetClocksFreq+0x148>)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	fbb2 f2f3 	udiv	r2, r2, r3
 800051c:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 800051e:	6859      	ldr	r1, [r3, #4]
 8000520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000524:	400b      	ands	r3, r1
 8000526:	099b      	lsrs	r3, r3, #6
 8000528:	fb03 f302 	mul.w	r3, r3, r2
 800052c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000536:	0c1b      	lsrs	r3, r3, #16
 8000538:	3301      	adds	r3, #1
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800053e:	69fa      	ldr	r2, [r7, #28]
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	fbb2 f2f3 	udiv	r2, r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	601a      	str	r2, [r3, #0]
      break;
 800054a:	e003      	b.n	8000554 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a23      	ldr	r2, [pc, #140]	; (80005dc <RCC_GetClocksFreq+0x148>)
 8000550:	601a      	str	r2, [r3, #0]
      break;
 8000552:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000554:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800055c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000564:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <RCC_GetClocksFreq+0x150>)
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	40da      	lsrs	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000584:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	0a9b      	lsrs	r3, r3, #10
 800058a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <RCC_GetClocksFreq+0x150>)
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	4413      	add	r3, r2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	40da      	lsrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <RCC_GetClocksFreq+0x144>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80005ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	0b5b      	lsrs	r3, r3, #13
 80005b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <RCC_GetClocksFreq+0x150>)
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	40da      	lsrs	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	60da      	str	r2, [r3, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3724      	adds	r7, #36	; 0x24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	40023800 	.word	0x40023800
 80005dc:	00f42400 	.word	0x00f42400
 80005e0:	017d7840 	.word	0x017d7840
 80005e4:	20000000 	.word	0x20000000

080005e8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005fa:	490a      	ldr	r1, [pc, #40]	; (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000606:	e006      	b.n	8000616 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000608:	4906      	ldr	r1, [pc, #24]	; (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <RCC_AHB1PeriphClockCmd+0x3c>)
 800060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	43db      	mvns	r3, r3
 8000612:	4013      	ands	r3, r2
 8000614:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800063a:	490a      	ldr	r1, [pc, #40]	; (8000664 <RCC_APB1PeriphClockCmd+0x3c>)
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <RCC_APB1PeriphClockCmd+0x3c>)
 800063e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4313      	orrs	r3, r2
 8000644:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000646:	e006      	b.n	8000656 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000648:	4906      	ldr	r1, [pc, #24]	; (8000664 <RCC_APB1PeriphClockCmd+0x3c>)
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <RCC_APB1PeriphClockCmd+0x3c>)
 800064c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	43db      	mvns	r3, r3
 8000652:	4013      	ands	r3, r2
 8000654:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800

08000668 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d006      	beq.n	8000688 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800067a:	490a      	ldr	r1, [pc, #40]	; (80006a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800067e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000686:	e006      	b.n	8000696 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000688:	4906      	ldr	r1, [pc, #24]	; (80006a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <RCC_APB2PeriphClockCmd+0x3c>)
 800068c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	43db      	mvns	r3, r3
 8000692:	4013      	ands	r3, r2
 8000694:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800

080006a8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80006ba:	2300      	movs	r3, #0
 80006bc:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	095b      	lsrs	r3, r3, #5
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d103      	bne.n	80006d4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <RCC_GetFlagStatus+0x70>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	e009      	b.n	80006e8 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d103      	bne.n	80006e2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <RCC_GetFlagStatus+0x70>)
 80006dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	e002      	b.n	80006e8 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <RCC_GetFlagStatus+0x70>)
 80006e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80006e6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 031f 	and.w	r3, r3, #31
 80006ee:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	fa22 f303 	lsr.w	r3, r2, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000700:	2301      	movs	r3, #1
 8000702:	74fb      	strb	r3, [r7, #19]
 8000704:	e001      	b.n	800070a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800070a:	7cfb      	ldrb	r3, [r7, #19]
}
 800070c:	4618      	mov	r0, r3
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40023800 	.word	0x40023800

0800071c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a29      	ldr	r2, [pc, #164]	; (80007d8 <TIM_TimeBaseInit+0xbc>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d013      	beq.n	8000760 <TIM_TimeBaseInit+0x44>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a28      	ldr	r2, [pc, #160]	; (80007dc <TIM_TimeBaseInit+0xc0>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d00f      	beq.n	8000760 <TIM_TimeBaseInit+0x44>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000746:	d00b      	beq.n	8000760 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <TIM_TimeBaseInit+0xc4>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d007      	beq.n	8000760 <TIM_TimeBaseInit+0x44>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <TIM_TimeBaseInit+0xc8>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d003      	beq.n	8000760 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <TIM_TimeBaseInit+0xcc>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d108      	bne.n	8000772 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000766:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	885a      	ldrh	r2, [r3, #2]
 800076c:	89fb      	ldrh	r3, [r7, #14]
 800076e:	4313      	orrs	r3, r2
 8000770:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <TIM_TimeBaseInit+0xd0>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d00c      	beq.n	8000794 <TIM_TimeBaseInit+0x78>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <TIM_TimeBaseInit+0xd4>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d008      	beq.n	8000794 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000788:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	891a      	ldrh	r2, [r3, #8]
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	4313      	orrs	r3, r2
 8000792:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	89fa      	ldrh	r2, [r7, #14]
 8000798:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <TIM_TimeBaseInit+0xbc>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d003      	beq.n	80007ba <TIM_TimeBaseInit+0x9e>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <TIM_TimeBaseInit+0xc0>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d104      	bne.n	80007c4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	7a9b      	ldrb	r3, [r3, #10]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2201      	movs	r2, #1
 80007c8:	829a      	strh	r2, [r3, #20]
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40010000 	.word	0x40010000
 80007dc:	40010400 	.word	0x40010400
 80007e0:	40000400 	.word	0x40000400
 80007e4:	40000800 	.word	0x40000800
 80007e8:	40000c00 	.word	0x40000c00
 80007ec:	40001000 	.word	0x40001000
 80007f0:	40001400 	.word	0x40001400

080007f4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d008      	beq.n	8000818 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	b29a      	uxth	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000816:	e007      	b.n	8000828 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000822:	b29a      	uxth	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	801a      	strh	r2, [r3, #0]
  }
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d008      	beq.n	8000858 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b29b      	uxth	r3, r3
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	b29a      	uxth	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000856:	e007      	b.n	8000868 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	b29b      	uxth	r3, r3
 800085e:	f023 0301 	bic.w	r3, r3, #1
 8000862:	b29a      	uxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	801a      	strh	r2, [r3, #0]
  }
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	817b      	strh	r3, [r7, #10]
 8000882:	2300      	movs	r3, #0
 8000884:	81fb      	strh	r3, [r7, #14]
 8000886:	2300      	movs	r3, #0
 8000888:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	8c1b      	ldrh	r3, [r3, #32]
 800088e:	b29b      	uxth	r3, r3
 8000890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000894:	b29a      	uxth	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	8c1b      	ldrh	r3, [r3, #32]
 800089e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8b9b      	ldrh	r3, [r3, #28]
 80008aa:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80008ac:	897b      	ldrh	r3, [r7, #10]
 80008ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80008b4:	897b      	ldrh	r3, [r7, #10]
 80008b6:	f023 0303 	bic.w	r3, r3, #3
 80008ba:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	881a      	ldrh	r2, [r3, #0]
 80008c0:	897b      	ldrh	r3, [r7, #10]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80008c6:	89fb      	ldrh	r3, [r7, #14]
 80008c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008cc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	899b      	ldrh	r3, [r3, #12]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	4313      	orrs	r3, r2
 80008da:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	885b      	ldrh	r3, [r3, #2]
 80008e0:	021b      	lsls	r3, r3, #8
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <TIM_OC3Init+0x104>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d003      	beq.n	80008fa <TIM_OC3Init+0x86>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a21      	ldr	r2, [pc, #132]	; (800097c <TIM_OC3Init+0x108>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d12b      	bne.n	8000952 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80008fa:	89fb      	ldrh	r3, [r7, #14]
 80008fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000900:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	89db      	ldrh	r3, [r3, #14]
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	89fb      	ldrh	r3, [r7, #14]
 800090c:	4313      	orrs	r3, r2
 800090e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000916:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	889b      	ldrh	r3, [r3, #4]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	b29a      	uxth	r2, r3
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	4313      	orrs	r3, r2
 8000924:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000926:	89bb      	ldrh	r3, [r7, #12]
 8000928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800092c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800092e:	89bb      	ldrh	r3, [r7, #12]
 8000930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000934:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	8a1b      	ldrh	r3, [r3, #16]
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	b29a      	uxth	r2, r3
 800093e:	89bb      	ldrh	r3, [r7, #12]
 8000940:	4313      	orrs	r3, r2
 8000942:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	8a5b      	ldrh	r3, [r3, #18]
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	b29a      	uxth	r2, r3
 800094c:	89bb      	ldrh	r3, [r7, #12]
 800094e:	4313      	orrs	r3, r2
 8000950:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	89ba      	ldrh	r2, [r7, #12]
 8000956:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	897a      	ldrh	r2, [r7, #10]
 800095c:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	89fa      	ldrh	r2, [r7, #14]
 800096a:	841a      	strh	r2, [r3, #32]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	40010000 	.word	0x40010000
 800097c:	40010400 	.word	0x40010400

08000980 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	8b9b      	ldrh	r3, [r3, #28]
 8000994:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	f023 0308 	bic.w	r3, r3, #8
 800099c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800099e:	89fa      	ldrh	r2, [r7, #14]
 80009a0:	887b      	ldrh	r3, [r7, #2]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	89fa      	ldrh	r2, [r7, #14]
 80009aa:	839a      	strh	r2, [r3, #28]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	8a1b      	ldrh	r3, [r3, #16]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	88db      	ldrh	r3, [r3, #6]
 80009e6:	461a      	mov	r2, r3
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	4313      	orrs	r3, r2
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	899b      	ldrh	r3, [r3, #12]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000a04:	f023 030c 	bic.w	r3, r3, #12
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	889a      	ldrh	r2, [r3, #4]
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	891b      	ldrh	r3, [r3, #8]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	4313      	orrs	r3, r2
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	8a9b      	ldrh	r3, [r3, #20]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	899b      	ldrh	r3, [r3, #12]
 8000a42:	461a      	mov	r2, r3
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	4313      	orrs	r3, r2
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd1c 	bl	8000494 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a30      	ldr	r2, [pc, #192]	; (8000b20 <USART_Init+0x168>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d003      	beq.n	8000a6c <USART_Init+0xb4>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <USART_Init+0x16c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d102      	bne.n	8000a72 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	e001      	b.n	8000a76 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	899b      	ldrh	r3, [r3, #12]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da0c      	bge.n	8000a9c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a82:	6a3a      	ldr	r2, [r7, #32]
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	441a      	add	r2, r3
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a98:	61fb      	str	r3, [r7, #28]
 8000a9a:	e00b      	b.n	8000ab4 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a9c:	6a3a      	ldr	r2, [r7, #32]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009a      	lsls	r2, r3, #2
 8000aa6:	441a      	add	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <USART_Init+0x170>)
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	095b      	lsrs	r3, r3, #5
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	2264      	movs	r2, #100	; 0x64
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da0c      	bge.n	8000af8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	3332      	adds	r3, #50	; 0x32
 8000ae4:	4a10      	ldr	r2, [pc, #64]	; (8000b28 <USART_Init+0x170>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af2:	4313      	orrs	r3, r2
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
 8000af6:	e00b      	b.n	8000b10 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	3332      	adds	r3, #50	; 0x32
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <USART_Init+0x170>)
 8000b00:	fba2 2303 	umull	r2, r3, r2, r3
 8000b04:	095b      	lsrs	r3, r3, #5
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	811a      	strh	r2, [r3, #8]
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40011400 	.word	0x40011400
 8000b28:	51eb851f 	.word	0x51eb851f

08000b2c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d008      	beq.n	8000b50 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	899b      	ldrh	r3, [r3, #12]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000b4e:	e007      	b.n	8000b60 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	899b      	ldrh	r3, [r3, #12]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	819a      	strh	r2, [r3, #12]
  }
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	809a      	strh	r2, [r3, #4]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	889b      	ldrh	r3, [r3, #4]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ba2:	b29b      	uxth	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b087      	sub	sp, #28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	095b      	lsrs	r3, r3, #5
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000be6:	2201      	movs	r2, #1
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d103      	bne.n	8000bfe <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e009      	b.n	8000c12 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d103      	bne.n	8000c0c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3310      	adds	r3, #16
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e002      	b.n	8000c12 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3314      	adds	r3, #20
 8000c10:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000c12:	787b      	ldrb	r3, [r7, #1]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	6811      	ldr	r1, [r2, #0]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c24:	e006      	b.n	8000c34 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	6811      	ldr	r1, [r2, #0]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	43d2      	mvns	r2, r2
 8000c30:	400a      	ands	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
  }
}
 8000c34:	bf00      	nop
 8000c36:	371c      	adds	r7, #28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	095b      	lsrs	r3, r3, #5
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	f003 031f 	and.w	r3, r3, #31
 8000c6c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000c6e:	2201      	movs	r2, #1
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d107      	bne.n	8000c8e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	899b      	ldrh	r3, [r3, #12]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e011      	b.n	8000cb2 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d107      	bne.n	8000ca4 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	8a1b      	ldrh	r3, [r3, #16]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	e006      	b.n	8000cb2 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	8a9b      	ldrh	r3, [r3, #20]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <USART_GetITStatus+0xa4>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	74fb      	strb	r3, [r7, #19]
 8000ce2:	e001      	b.n	8000ce8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000ce8:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000d04:	2300      	movs	r3, #0
 8000d06:	81fb      	strh	r3, [r7, #14]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	2201      	movs	r2, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000d1c:	89bb      	ldrh	r3, [r7, #12]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	801a      	strh	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <main>:
**  Abstract: main program
**
**===========================================================================
*/

int main(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

	initSYSTEMCLOCK();
 8000d38:	f000 f806 	bl	8000d48 <_Z15initSYSTEMCLOCKv>

	initUSART();
 8000d3c:	f000 f81c 	bl	8000d78 <_Z9initUSARTv>

	initPWM();
 8000d40:	f000 f8a0 	bl	8000e84 <_Z7initPWMv>

	while (1) {
 8000d44:	e7fe      	b.n	8000d44 <main+0x10>
 8000d46:	bf00      	nop

08000d48 <_Z15initSYSTEMCLOCKv>:
#include <misc.h>
#include <servo.h>

uint8_t value;

void initSYSTEMCLOCK(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

	RCC_HSICmd(ENABLE);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fb75 	bl	800043c <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000d52:	2021      	movs	r0, #33	; 0x21
 8000d54:	f7ff fca8 	bl	80006a8 <RCC_GetFlagStatus>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d000      	beq.n	8000d6a <_Z15initSYSTEMCLOCKv+0x22>
 8000d68:	e7f3      	b.n	8000d52 <_Z15initSYSTEMCLOCKv+0xa>

	RCC_SYSCLKConfig(RCC_CFGR_SW_HSI);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fb76 	bl	800045c <RCC_SYSCLKConfig>
	SystemCoreClockUpdate();
 8000d70:	f000 f972 	bl	8001058 <SystemCoreClockUpdate>

	//uint32_t SystemClockValue = SystemCoreClock;

	return;
 8000d74:	bf00      	nop

}
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_Z9initUSARTv>:

void initUSART(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

	 /* enable APB2 peripheral clock for USART1
	  * note that only USART1 and USART6 are connected to APB2
	  * the other USARTs are connected to APB1
	  */
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2010      	movs	r0, #16
 8000d82:	f7ff fc71 	bl	8000668 <RCC_APB2PeriphClockCmd>

	 /* enable the peripheral clock for the pins used by
	  * USART1, PB6 for TX and PB7 for RX
	  */
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000d86:	2101      	movs	r1, #1
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f7ff fc2d 	bl	80005e8 <RCC_AHB1PeriphClockCmd>

	 /* This sequence sets up the TX and RX pins
	  * so they work correctly with the USART1 peripheral
	  */
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8000d8e:	23c0      	movs	r3, #192	; 0xc0
 8000d90:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			 // the pins are configured as alternate function so the USART peripheral has access to them
 8000d92:	2302      	movs	r3, #2
 8000d94:	773b      	strb	r3, [r7, #28]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		 // this defines the IO speed and has nothing to do with the baudrate!
 8000d96:	2302      	movs	r3, #2
 8000d98:	777b      	strb	r3, [r7, #29]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;		 // this defines the output type as push pull mode (as opposed to open drain)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	77bb      	strb	r3, [r7, #30]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			 // this activates the pullup resistors on the IO pins
 8000d9e:	2301      	movs	r3, #1
 8000da0:	77fb      	strb	r3, [r7, #31]
	 GPIO_Init(GPIOB, &GPIO_InitStruct);				 // now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4619      	mov	r1, r3
 8000da8:	481c      	ldr	r0, [pc, #112]	; (8000e1c <_Z9initUSARTv+0xa4>)
 8000daa:	f7ff fa6f 	bl	800028c <GPIO_Init>

	 /* The RX and TX pins are now connected to their AF
	  * so that the USART1 can take over control of the
	  * pins
	  */
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8000dae:	2207      	movs	r2, #7
 8000db0:	2106      	movs	r1, #6
 8000db2:	481a      	ldr	r0, [pc, #104]	; (8000e1c <_Z9initUSARTv+0xa4>)
 8000db4:	f7ff faf8 	bl	80003a8 <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8000db8:	2207      	movs	r2, #7
 8000dba:	2107      	movs	r1, #7
 8000dbc:	4817      	ldr	r0, [pc, #92]	; (8000e1c <_Z9initUSARTv+0xa4>)
 8000dbe:	f7ff faf3 	bl	80003a8 <GPIO_PinAFConfig>

	 /* Now the USART_InitStruct is used to define the
	  * properties of USART1
	  */
	 USART_InitStruct.USART_BaudRate = 9600;				 // the baudrate is set to the value we passed into this init function
 8000dc2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000dc6:	60bb      	str	r3, [r7, #8]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;	 // we want 1 stop bit (standard)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81fb      	strh	r3, [r7, #14]
	 USART_InitStruct.USART_Parity = USART_Parity_No;		 // we don't want a parity bit (standard)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	823b      	strh	r3, [r7, #16]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	82bb      	strh	r3, [r7, #20]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000dd8:	230c      	movs	r3, #12
 8000dda:	827b      	strh	r3, [r7, #18]
	 USART_Init(USART1, &USART_InitStruct);					 // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4619      	mov	r1, r3
 8000de2:	480f      	ldr	r0, [pc, #60]	; (8000e20 <_Z9initUSARTv+0xa8>)
 8000de4:	f7ff fde8 	bl	80009b8 <USART_Init>
	 /* Here the USART1 receive interrupt is enabled
	  * and the interrupt controller is configured
	  * to jump to the USART1_IRQHandler() function
	  * if the USART1 receive interrupt occurs
	  */
	 USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8000de8:	2201      	movs	r2, #1
 8000dea:	f240 5125 	movw	r1, #1317	; 0x525
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <_Z9initUSARTv+0xa8>)
 8000df0:	f7ff fede 	bl	8000bb0 <USART_ITConfig>

	 NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		  // we want to configure the USART1 interrupts
 8000df4:	2325      	movs	r3, #37	; 0x25
 8000df6:	713b      	strb	r3, [r7, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8; // this sets the priority group of the USART1 interrupts
 8000df8:	2308      	movs	r3, #8
 8000dfa:	717b      	strb	r3, [r7, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		  // this sets the subpriority inside the group
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71bb      	strb	r3, [r7, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			  // the USART1 interrupts are globally enabled
 8000e00:	2301      	movs	r3, #1
 8000e02:	71fb      	strb	r3, [r7, #7]
	 NVIC_Init(&NVIC_InitStructure);							  // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9de 	bl	80001c8 <NVIC_Init>

	 // finally this enables the complete USART1 peripheral
	 USART_Cmd(USART1, ENABLE);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <_Z9initUSARTv+0xa8>)
 8000e10:	f7ff fe8c 	bl	8000b2c <USART_Cmd>

	 return;
 8000e14:	bf00      	nop
}
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40011000 	.word	0x40011000

08000e24 <USART1_IRQHandler>:

extern "C" void USART1_IRQHandler(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	// this is the interrupt request handler (IRQ) for ALL USART1 interrupts

	if (USART_GetITStatus(USART1, USART_IT_RXNE)==SET) {
 8000e28:	f240 5125 	movw	r1, #1317	; 0x525
 8000e2c:	4812      	ldr	r0, [pc, #72]	; (8000e78 <USART1_IRQHandler+0x54>)
 8000e2e:	f7ff ff07 	bl	8000c40 <USART_GetITStatus>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	bf0c      	ite	eq
 8000e38:	2301      	moveq	r3, #1
 8000e3a:	2300      	movne	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d017      	beq.n	8000e72 <USART1_IRQHandler+0x4e>

		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8000e42:	f240 5125 	movw	r1, #1317	; 0x525
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <USART1_IRQHandler+0x54>)
 8000e48:	f7ff ff56 	bl	8000cf8 <USART_ClearITPendingBit>
		value = USART_ReceiveData(USART1);
 8000e4c:	480a      	ldr	r0, [pc, #40]	; (8000e78 <USART1_IRQHandler+0x54>)
 8000e4e:	f7ff fe9f 	bl	8000b90 <USART_ReceiveData>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <USART1_IRQHandler+0x58>)
 8000e58:	701a      	strb	r2, [r3, #0]
		// Send data back for verification
		USART_SendData(USART1,value);
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <USART1_IRQHandler+0x58>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <USART1_IRQHandler+0x54>)
 8000e64:	f7ff fe82 	bl	8000b6c <USART_SendData>

		TIM4->CCR3 = value; // pre servo, PWM = 2000, value = cca 120-180
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <USART1_IRQHandler+0x5c>)
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <USART1_IRQHandler+0x58>)
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c

	}

	return;
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
}
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	20000040 	.word	0x20000040
 8000e80:	40000800 	.word	0x40000800

08000e84 <_Z7initPWMv>:

void initPWM(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
	TIM_OCInitTypeDef  TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable TIM4 Clock */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2004      	movs	r0, #4
 8000e8e:	f7ff fbcb 	bl	8000628 <RCC_APB1PeriphClockCmd>

	//Enabled GPIOB we are going to use PB8 which is linked to TIM4_CH3 according to the
	//documentation (202-page datasheet, page 58 - TIM4_CH3)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff fba7 	bl	80005e8 <RCC_AHB1PeriphClockCmd>

	// Initalise pin 8 B - relating to timer 4 channel 3
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8000eac:	2301      	movs	r3, #1
 8000eae:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <_Z7initPWMv+0x9c>)
 8000eb6:	f7ff f9e9 	bl	800028c <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM4);
 8000eba:	2202      	movs	r2, #2
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <_Z7initPWMv+0x9c>)
 8000ec0:	f7ff fa72 	bl	80003a8 <GPIO_PinAFConfig>

	/* Setup PWM */
	/* Setup timer defaults */
	TIM_TimeBaseStructure.TIM_Period = 2000-1; // 50Hz PWM / 20ms
 8000ec4:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000ec8:	623b      	str	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_Prescaler = 80-1; // 100kHz vstupne hodiny
 8000eca:	234f      	movs	r3, #79	; 0x4f
 8000ecc:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	83fb      	strh	r3, [r7, #30]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <_Z7initPWMv+0xa0>)
 8000ede:	f7ff fc1d 	bl	800071c <TIM_TimeBaseInit>

	/* Configure timer for PWM - same settings for both channels */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000ee2:	2360      	movs	r3, #96	; 0x60
 8000ee4:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82bb      	strh	r3, [r7, #20]

	//notice the number 3 in TIM_OC3Init
	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <_Z7initPWMv+0xa0>)
 8000efa:	f7ff fcbb 	bl	8000874 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8000efe:	2108      	movs	r1, #8
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <_Z7initPWMv+0xa0>)
 8000f02:	f7ff fd3d 	bl	8000980 <TIM_OC3PreloadConfig>

	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8000f06:	2101      	movs	r1, #1
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <_Z7initPWMv+0xa0>)
 8000f0a:	f7ff fc73 	bl	80007f4 <TIM_ARRPreloadConfig>

	/* Start timer */
	TIM_Cmd(TIM4, ENABLE);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <_Z7initPWMv+0xa0>)
 8000f12:	f7ff fc8f 	bl	8000834 <TIM_Cmd>

	return;
 8000f16:	bf00      	nop
}
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40000800 	.word	0x40000800

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f2e:	e003      	b.n	8000f38 <LoopCopyDataInit>

08000f30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f36:	3104      	adds	r1, #4

08000f38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f40:	d3f6      	bcc.n	8000f30 <CopyDataInit>
  ldr  r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f44:	e002      	b.n	8000f4c <LoopFillZerobss>

08000f46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f48:	f842 3b04 	str.w	r3, [r2], #4

08000f4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f50:	d3f9      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f52:	f000 f84b 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f000 f979 	bl	800124c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff feeb 	bl	8000d34 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f60:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000f64:	080012b8 	.word	0x080012b8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f6c:	20000024 	.word	0x20000024
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000f70:	20000024 	.word	0x20000024
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f74:	20000044 	.word	0x20000044

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000f90:	e7fe      	b.n	8000f90 <HardFault_Handler+0x4>
 8000f92:	bf00      	nop

08000f94 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>
 8000f9a:	bf00      	nop

08000f9c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000fa0:	e7fe      	b.n	8000fa0 <BusFault_Handler+0x4>
 8000fa2:	bf00      	nop

08000fa4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>
 8000faa:	bf00      	nop

08000fac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4a16      	ldr	r2, [pc, #88]	; (800104c <SystemInit+0x60>)
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <SystemInit+0x60>)
 8000ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <SystemInit+0x64>)
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <SystemInit+0x64>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <SystemInit+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <SystemInit+0x64>)
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <SystemInit+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800101c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <SystemInit+0x64>)
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <SystemInit+0x68>)
 8001026:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <SystemInit+0x64>)
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <SystemInit+0x64>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001032:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800103a:	f000 f88b 	bl	8001154 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800103e:	4b03      	ldr	r3, [pc, #12]	; (800104c <SystemInit+0x60>)
 8001040:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001044:	609a      	str	r2, [r3, #8]
#endif
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00
 8001050:	40023800 	.word	0x40023800
 8001054:	24003010 	.word	0x24003010

08001058 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	2302      	movs	r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	2302      	movs	r3, #2
 8001070:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
 800107a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d007      	beq.n	8001092 <SystemCoreClockUpdate+0x3a>
 8001082:	2b08      	cmp	r3, #8
 8001084:	d009      	beq.n	800109a <SystemCoreClockUpdate+0x42>
 8001086:	2b00      	cmp	r3, #0
 8001088:	d13f      	bne.n	800110a <SystemCoreClockUpdate+0xb2>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <SystemCoreClockUpdate+0xec>)
 800108c:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <SystemCoreClockUpdate+0xf0>)
 800108e:	601a      	str	r2, [r3, #0]
      break;
 8001090:	e03f      	b.n	8001112 <SystemCoreClockUpdate+0xba>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <SystemCoreClockUpdate+0xec>)
 8001094:	4a2d      	ldr	r2, [pc, #180]	; (800114c <SystemCoreClockUpdate+0xf4>)
 8001096:	601a      	str	r2, [r3, #0]
      break;
 8001098:	e03b      	b.n	8001112 <SystemCoreClockUpdate+0xba>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800109a:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	0d9b      	lsrs	r3, r3, #22
 80010a4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010ae:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <SystemCoreClockUpdate+0x7a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010b6:	4a25      	ldr	r2, [pc, #148]	; (800114c <SystemCoreClockUpdate+0xf4>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 80010c0:	6859      	ldr	r1, [r3, #4]
 80010c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010c6:	400b      	ands	r3, r1
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	fb03 f302 	mul.w	r3, r3, r2
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e00c      	b.n	80010ec <SystemCoreClockUpdate+0x94>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <SystemCoreClockUpdate+0xf0>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 80010dc:	6859      	ldr	r1, [r3, #4]
 80010de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010e2:	400b      	ands	r3, r1
 80010e4:	099b      	lsrs	r3, r3, #6
 80010e6:	fb03 f302 	mul.w	r3, r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f4:	0c1b      	lsrs	r3, r3, #16
 80010f6:	3301      	adds	r3, #1
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	fbb2 f3f3 	udiv	r3, r2, r3
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <SystemCoreClockUpdate+0xec>)
 8001106:	6013      	str	r3, [r2, #0]
      break;
 8001108:	e003      	b.n	8001112 <SystemCoreClockUpdate+0xba>
    default:
      SystemCoreClock = HSI_VALUE;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <SystemCoreClockUpdate+0xec>)
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <SystemCoreClockUpdate+0xf0>)
 800110e:	601a      	str	r2, [r3, #0]
      break;
 8001110:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <SystemCoreClockUpdate+0xe8>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <SystemCoreClockUpdate+0xf8>)
 800111e:	5cd3      	ldrb	r3, [r2, r3]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <SystemCoreClockUpdate+0xec>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	fa22 f303 	lsr.w	r3, r2, r3
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <SystemCoreClockUpdate+0xec>)
 8001130:	6013      	str	r3, [r2, #0]
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	20000010 	.word	0x20000010
 8001148:	00f42400 	.word	0x00f42400
 800114c:	017d7840 	.word	0x017d7840
 8001150:	20000014 	.word	0x20000014

08001154 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001162:	4a36      	ldr	r2, [pc, #216]	; (800123c <SetSysClock+0xe8>)
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <SetSysClock+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <SetSysClock+0xe8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3301      	adds	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <SetSysClock+0x38>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800118a:	d1f0      	bne.n	800116e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <SetSysClock+0xe8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001198:	2301      	movs	r3, #1
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	e001      	b.n	80011a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d142      	bne.n	800122e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <SetSysClock+0xe8>)
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <SetSysClock+0xe8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <SetSysClock+0xec>)
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <SetSysClock+0xec>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <SetSysClock+0xe8>)
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <SetSysClock+0xe8>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <SetSysClock+0xe8>)
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SetSysClock+0xe8>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <SetSysClock+0xe8>)
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <SetSysClock+0xe8>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80011de:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <SetSysClock+0xe8>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <SetSysClock+0xf0>)
 80011e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <SetSysClock+0xe8>)
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <SetSysClock+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011f2:	bf00      	nop
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <SetSysClock+0xe8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f9      	beq.n	80011f4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <SetSysClock+0xf4>)
 8001202:	f240 7205 	movw	r2, #1797	; 0x705
 8001206:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <SetSysClock+0xe8>)
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <SetSysClock+0xe8>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <SetSysClock+0xe8>)
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <SetSysClock+0xe8>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001220:	bf00      	nop
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <SetSysClock+0xe8>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d1f9      	bne.n	8001222 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000
 8001244:	07405419 	.word	0x07405419
 8001248:	40023c00 	.word	0x40023c00

0800124c <__libc_init_array>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <__libc_init_array+0x3c>)
 8001250:	4c0e      	ldr	r4, [pc, #56]	; (800128c <__libc_init_array+0x40>)
 8001252:	1ae4      	subs	r4, r4, r3
 8001254:	10a4      	asrs	r4, r4, #2
 8001256:	2500      	movs	r5, #0
 8001258:	461e      	mov	r6, r3
 800125a:	42a5      	cmp	r5, r4
 800125c:	d004      	beq.n	8001268 <__libc_init_array+0x1c>
 800125e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001262:	4798      	blx	r3
 8001264:	3501      	adds	r5, #1
 8001266:	e7f8      	b.n	800125a <__libc_init_array+0xe>
 8001268:	f000 f816 	bl	8001298 <_init>
 800126c:	4c08      	ldr	r4, [pc, #32]	; (8001290 <__libc_init_array+0x44>)
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <__libc_init_array+0x48>)
 8001270:	1ae4      	subs	r4, r4, r3
 8001272:	10a4      	asrs	r4, r4, #2
 8001274:	2500      	movs	r5, #0
 8001276:	461e      	mov	r6, r3
 8001278:	42a5      	cmp	r5, r4
 800127a:	d004      	beq.n	8001286 <__libc_init_array+0x3a>
 800127c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001280:	4798      	blx	r3
 8001282:	3501      	adds	r5, #1
 8001284:	e7f8      	b.n	8001278 <__libc_init_array+0x2c>
 8001286:	bd70      	pop	{r4, r5, r6, pc}
 8001288:	080012b0 	.word	0x080012b0
 800128c:	080012b0 	.word	0x080012b0
 8001290:	080012b4 	.word	0x080012b4
 8001294:	080012b0 	.word	0x080012b0

08001298 <_init>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr

080012a4 <_fini>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr
